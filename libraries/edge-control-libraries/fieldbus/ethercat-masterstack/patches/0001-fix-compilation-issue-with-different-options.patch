From 274a6b5ac5b619006b42fd10d56e62c52b4c34c9 Mon Sep 17 00:00:00 2001
From: zhangw2 <wei.e.zhang@intel.com>
Date: Thu, 14 Aug 2025 02:18:34 +0800
Subject: [PATCH] fix compilation issue with different options

add pthread thread to trig on ethercat recv/sendwq

Signed-off-by: zhangw2 <wei.e.zhang@intel.com>
---
 examples/debug/Makefile.am     |  2 +-
 examples/debug/main.c          | 43 ++++++++++++++++++++++++++++++++--
 examples/ecatdio/Makefile.am   |  2 +-
 examples/ecatdio/main.c        |  7 ++++++
 examples/ecatmotor/Makefile.am |  2 +-
 examples/ecatmotor/main.c      |  6 +++++
 master/master.c                |  2 +-
 7 files changed, 58 insertions(+), 6 deletions(-)

diff --git a/examples/debug/Makefile.am b/examples/debug/Makefile.am
index f43926da..dba27a60 100644
--- a/examples/debug/Makefile.am
+++ b/examples/debug/Makefile.am
@@ -39,6 +39,6 @@ ec_debug_example_CFLAGS = \
 ec_debug_example_LDFLAGS = \
 	-lrt
 ec_debug_example_LDFLAGS += \
-	-L$(top_builddir)/master/.libs -lethercatd
+	-L$(top_builddir)/master/.libs -lethercatd -lrt -lpthread
 
 #------------------------------------------------------------------------------
diff --git a/examples/debug/main.c b/examples/debug/main.c
index 143289d5..c406bad6 100644
--- a/examples/debug/main.c
+++ b/examples/debug/main.c
@@ -34,14 +34,23 @@
 #include <unistd.h>
 #include <sys/mman.h>
 #include "ecrt.h"
+#include <pthread.h>
 
 #include <getopt.h>
 
+#define CYCLE_US    			1000
+#define PERIOD_NS   			(CYCLE_US*1000)
+#define NSEC_PER_SEC    		(1000000000L)
+#define TIMESPEC2NS(T)  		((uint64_t) (T).tv_sec * NSEC_PER_SEC + (T).tv_nsec)
+#define DIFF_NS(A,B)    		(((B).tv_sec - (A).tv_sec)*NSEC_PER_SEC + ((B).tv_nsec)-(A).tv_nsec)
+
 static volatile int run = 1;
 static ec_master_t *masters = NULL;
 static ec_master_t *master = NULL;
 static int master_id = 0;
 
+static pthread_t cyclic_thread;
+
 void signal_handler(int sig)
 {
     run = 0;
@@ -77,6 +86,26 @@ static void getOptions(int argc, char **argv)
     while(index != -1);
 }
 
+void *my_thread(void *arg)
+{
+    struct timespec next_period;
+
+    struct sched_param param = {.sched_priority = 99};
+    pthread_setschedparam(pthread_self(), SCHED_FIFO, &param);
+    clock_gettime(CLOCK_MONOTONIC, &next_period);
+
+    while (run) {
+        next_period.tv_nsec += CYCLE_US * 1000;
+        while (next_period.tv_nsec >= NSEC_PER_SEC) {
+            next_period.tv_nsec -= NSEC_PER_SEC;
+            next_period.tv_sec++;
+        }
+        clock_nanosleep(CLOCK_MONOTONIC, TIMER_ABSTIME, &next_period, NULL);
+        ecrt_master_receive(master);
+        ecrt_master_send(master);
+    }
+    return NULL;
+}
 
 /****************************************************************************
  * Main function
@@ -90,9 +119,9 @@ int main(int argc, char *argv[])
 
     printf("Requesting master...\n");
 #if !EC_ENABLE_DAEMON
-    masters = ecrt_masters_create(0);
+    masters = ecrt_masters_create(master_id);
 #endif
-    master = ecrt_request_master(master_id);
+    master = ecrt_request_master(0);
     if (!master) {
         return -1;
     }
@@ -100,6 +129,16 @@ int main(int argc, char *argv[])
         return -1;
     }
 
+    /* Create cyclic RT-thread */
+    pthread_attr_t thattr;
+    pthread_attr_init(&thattr);
+    pthread_attr_setdetachstate(&thattr, PTHREAD_CREATE_JOINABLE);
+
+    if (pthread_create(&cyclic_thread, &thattr, &my_thread, NULL)) {
+        fprintf(stderr, "pthread_create cyclic task failed\n");
+        return 1;
+    }
+
     while (run) {
         sleep(1);
     }
diff --git a/examples/ecatdio/Makefile.am b/examples/ecatdio/Makefile.am
index 3cd379b5..a7639fd9 100644
--- a/examples/ecatdio/Makefile.am
+++ b/examples/ecatdio/Makefile.am
@@ -52,6 +52,7 @@ ec_ecatdio_example_CFLAGS = \
 ec_ecatdio_example_LDFLAGS = \
 	-lrt -lpthread -lmodbus
 if ENABLE_USERMODE
+ec_ecatdio_example_CFLAGS += -DEC_ENABLE_USERMODE=1
 if ENABLE_DAEMON
 ec_ecatdio_example_CFLAGS += -DEC_ENABLE_DAEMON=1
 ec_ecatdio_example_LDFLAGS += \
@@ -61,7 +62,6 @@ ec_ecatdio_example_LDFLAGS += \
 	-L$(top_builddir)/master/.libs -lethercatd
 endif
 else
-ec_ecatdio_example_CFLAGS += -DEC_ENABLE_DAEMON=1
 ec_ecatdio_example_LDFLAGS += \
 	-L$(top_builddir)/lib/.libs -lethercat
 endif
diff --git a/examples/ecatdio/main.c b/examples/ecatdio/main.c
index 1f34fd10..2966dbde 100644
--- a/examples/ecatdio/main.c
+++ b/examples/ecatdio/main.c
@@ -62,9 +62,11 @@ static uint32_t horselight_tick = 1000;
 static pthread_t cyclic_thread;
 static volatile int run = 1;
 
+#if EC_ENABLE_USERMODE
 #if !EC_ENABLE_DAEMON
 static ec_master_t *masters = NULL;
 #endif
+#endif
 static ec_master_t *master = NULL;
 static ec_master_state_t master_state = {};
 static Slave_Data ec_slave0;
@@ -280,15 +282,20 @@ int main(int argc, char *argv[])
     mlockall(MCL_CURRENT | MCL_FUTURE);
 
     printf("Requesting master...\n");
+#if EC_ENABLE_USERMODE
 #if !EC_ENABLE_DAEMON
     masters = ecrt_masters_create(0);
+#endif
 #endif
     master = ecrt_request_master(0);
     if (!master) {
         return -1;
     }
+
+#if EC_ENABLE_USERMODE
 #if !EC_ENABLE_DAEMON
     ecrt_master_wait_for_slave(master, 1);
+#endif
 #endif
 
     printf("Creating domain ...\n");
diff --git a/examples/ecatmotor/Makefile.am b/examples/ecatmotor/Makefile.am
index d644d552..06b375a7 100644
--- a/examples/ecatmotor/Makefile.am
+++ b/examples/ecatmotor/Makefile.am
@@ -51,6 +51,7 @@ ec_motor_example_CFLAGS = \
 ec_motor_example_LDFLAGS = \
 	-lrt -lpthread
 if ENABLE_USERMODE
+ec_motor_example_CFLAGS += -DEC_ENABLE_USERMODE=1
 if ENABLE_DAEMON
 ec_motor_example_CFLAGS += -DEC_ENABLE_DAEMON=1
 ec_motor_example_LDFLAGS += \
@@ -60,7 +61,6 @@ ec_motor_example_LDFLAGS += \
 	-L$(top_builddir)/master/.libs -lethercatd
 endif
 else
-ec_motor_example_CFLAGS += -DEC_ENABLE_DAEMON=1
 ec_motor_example_LDFLAGS += \
 	-L$(top_builddir)/lib/.libs -lethercat
 endif
diff --git a/examples/ecatmotor/main.c b/examples/ecatmotor/main.c
index df45a028..5ab23424 100644
--- a/examples/ecatmotor/main.c
+++ b/examples/ecatmotor/main.c
@@ -58,9 +58,11 @@ static int operation_mode = MODE_CSP;
 static ec_sync_info_t* servo_syncs;
 static int slave_decord_per_cycle;
 
+#if EC_ENABLE_USERMODE
 #if !EC_ENABLE_DAEMON
 static ec_master_t *masters = NULL;
 #endif
+#endif
 static ec_master_t *master = NULL;
 static ec_master_state_t master_state = {};
 static Slave_Data ec_slave0;
@@ -358,15 +360,19 @@ int main(int argc, char *argv[])
     signal(SIGINT, signal_handler);
     mlockall(MCL_CURRENT | MCL_FUTURE);
 
+#if EC_ENABLE_USERMODE
 #if !EC_ENABLE_DAEMON
     masters = ecrt_masters_create(0);
+#endif
 #endif
     master = ecrt_request_master(master_id);
     if (!master) {
         return -1;
     }
+#if EC_ENABLE_USERMODE
 #if !EC_ENABLE_DAEMON
     ecrt_master_wait_for_slave(master, 1);
+#endif
 #endif
 
     printf("Creating domain ...\n");
diff --git a/master/master.c b/master/master.c
index 9f7cf408..3dcb4eda 100644
--- a/master/master.c
+++ b/master/master.c
@@ -1785,7 +1785,7 @@ static int ec_master_idle_thread(void *priv_data)
             ec_master_queue_datagram(master, &master->fsm_datagram);
         }
 #ifdef EC_USERMODE
-        sent_bytes = ecrt_master_send(master);
+        ecrt_master_send(master);
 #else
         ecrt_master_send(master);
 #ifdef EC_USE_HRTIMER
-- 
2.34.1

