---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: "[GEN-AI] Visual-data-preparation-for-retrieval-CI"
run-name: "[GEN-AI-Visual-data-preparation-for-retrieval-CI] PR  workflow (by @${{ github.actor }} via ${{ github.event_name }})"


# Only run at most 1 workflow concurrently per PR, unlimited for branches
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

on:
  pull_request:
    branches:
      - main
    paths:
      - 'microservices/visual-data-preparation-for-retrieval/**'

jobs:
   
  trivy-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
        with:
          persist-credentials: false
      
      - name: Build Docker images
        run: |          
          # Build VDMS dataprep microservice (Poetry-based FastAPI)
          cd microservices/visual-data-preparation-for-retrieval/vdms/
          docker build -f ./docker/Dockerfile -t vdms-dataprep:latest .
          
          # Build Milvus dataprep microservice (requirements.txt-based)
          # Note: Build context must be microservices/ to access both visual-data-preparation-for-retrieval and vector-retriever
          cd ../../../microservices/
          docker build -f visual-data-preparation-for-retrieval/milvus/src/Dockerfile -t milvus-dataprep:latest .
          
      - name: Verify Docker images
        run: |
          echo "=== Built Docker Images ==="
          docker images | grep -E "(vdms-dataprep|milvus-dataprep)"
          echo "=== Image Build Verification Complete ==="
      
      - name: Run Trivy Filesystem Scan
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: trivy-fs
        with:
          scan_type: "fs"  
          scan-scope: "all"  
          severity: "HIGH,CRITICAL" 
          format: "json"
          scan_target: "microservices/visual-data-preparation-for-retrieval/"
          report_suffix: "-fs-visual-data-preparation-CT7"
      
         
      - name: Run trivy Scan - vdms-dataprep (HTML Report)
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: vdms-dataprep-html
        with:
          scan_type: "image"  
          scan-scope: "all"
          scan_target: "vdms-dataprep:latest"  
          severity: "HIGH,CRITICAL"  
          format: "table"
          report_suffix: "-image-vdms-dataprep-html-CT248"
          generate_sbom: "false"

      - name: Run trivy Scan - vdms-dataprep (SPDX SBOM)
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: vdms-dataprep-spdx
        with:
          scan_type: "image"  
          scan-scope: "all"
          scan_target: "vdms-dataprep:latest"  
          severity: "HIGH,CRITICAL"  
          format: "spdx-json"
          scanners: "vuln"
          report_suffix: "-image-vdms-dataprep-spdx-CT248"
          generate_sbom: "false"

      - name: Run trivy Scan - milvus-dataprep (HTML Report)
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: milvus-dataprep-html
        with:
          scan_type: "image"  
          scan-scope: "all"
          scan_target: "milvus-dataprep:latest"  
          severity: "HIGH,CRITICAL"  
          format: "table"
          report_suffix: "-image-milvus-dataprep-html-CT249"
          generate_sbom: "false"

      - name: Run trivy Scan - milvus-dataprep (SPDX SBOM)
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: milvus-dataprep-spdx
        with:
          scan_type: "image"  
          scan-scope: "all"
          scan_target: "milvus-dataprep:latest"  
          severity: "HIGH,CRITICAL"  
          format: "spdx-json"
          scanners: "vuln"
          report_suffix: "-image-milvus-dataprep-spdx-CT249"
          generate_sbom: "false"

      - name: Scan VDMS Dockerfile with Trivy
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        with:
          scan_type: "config"
          scan_target: "microservices/visual-data-preparation-for-retrieval/vdms/docker/"
          severity: "HIGH,CRITICAL"
          format: "json"
          misconfig_scanners: "dockerfile"
          report_suffix: "-config-vdms-dockerfile-CT222"

      - name: Scan Milvus Dockerfile with Trivy
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        with:
          scan_type: "config"
          scan_target: "microservices/visual-data-preparation-for-retrieval/milvus/src/"
          severity: "HIGH,CRITICAL"
          format: "json"
          misconfig_scanners: "dockerfile"
          report_suffix: "-config-milvus-dockerfile-CT223"
           
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: trivy-report-visual-data-preparation
          path: security-results/trivy*
           
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: trivy-report-visual-data-preparation
          path: security-results/trivy*

  bandit-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Run Bandit Scan
        uses: open-edge-platform/orch-ci/.github/actions/security/bandit@27276444a9bcf247a27369406686b689933bd1ff
        id: bandit
        with:
          scan-scope: "all"  
          output-format: "txt" 
          fail-on-findings: "false"
          paths: "microservices/visual-data-preparation-for-retrieval/"
          report_suffix: "-bandit-visual-data-preparation-CT161"
          
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: bandit-report-visual-data-preparation
          path: bandit-report-*.txt
        

  clamav-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Run ClamAV Scan
        uses: open-edge-platform/orch-ci/.github/actions/security/clamav@27276444a9bcf247a27369406686b689933bd1ff
        id: clamav
        with:
          scan-scope: "all"  
          output-format: "txt" 
          fail-on-findings: "false"
          paths: "microservices/visual-data-preparation-for-retrieval/"
          exclude_dirs: ".git,tests,.pytest_cache,__pycache__,.venv"
          
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: clamav-report-visual-data-preparation
          path: security-results/clamav*

  # GitLeaks scanning job
  gitleaks-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
        with:
          persist-credentials: false
          
      - name: Install gitleaks
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@5f1c7f544b235db6ded508b6b4c6a2d3a78a38be
        with:
          bootstrap_tools: "gitleaks"
          
      - name: Get current timestamp
        id: timestamp
        run: echo "time=$(date +%s)" >> "$GITHUB_OUTPUT"
        
      - name: Clone CI repo
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          persist-credentials: false
          
      - name: Scan for secrets
        run: |
          gitleaks dir "microservices/visual-data-preparation-for-retrieval/" -v -c ci/.gitleaks.toml --baseline-path ci/gitleaks_baselines/gitleaks-visual-data-preparation.json -r gitleaks-visual-data-preparation.json || true
          
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: gitleaks-report-visual-data-preparation-${{ steps.timestamp.outputs.time }}
          path: gitleaks-visual-data-preparation.json

  # Python linting with pylint - VDMS DataPrep (Poetry-based)
  pylint-scan-vdms-dataprep:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        run: |
          pip install poetry
          
      - name: Install dependencies and pylint
        run: |
          cd microservices/visual-data-preparation-for-retrieval/vdms/
          poetry lock --no-update
          poetry install --with dev || true
          poetry add --group dev pylint || true
      
      - name: Run pylint
        run: |
          cd microservices/visual-data-preparation-for-retrieval/vdms/
          mkdir -p security-results
          echo "=== Pylint Scan Results - VDMS DataPrep ===" > security-results/pylint-report-vdms-dataprep.txt
          echo "Scan Date: $(date)" >> security-results/pylint-report-vdms-dataprep.txt
          echo "" >> security-results/pylint-report-vdms-dataprep.txt
          
          # Create a basic pylint config
          cat > .pylintrc << EOF
          [MESSAGES CONTROL]
          disable=C0111,C0103,R0903,R0913,W0613,W0622,R0801,R0902,R0914,R0915,R0912,C0301,C0302,R0801
          
          [FORMAT]
          max-line-length=120
          
          [REPORTS]
          output-format=text
          reports=yes
          EOF
          
          # Find all Python files and lint them
          find src/ -type f -name "*.py" -exec poetry run pylint --rcfile=.pylintrc {} + >> security-results/pylint-report-vdms-dataprep.txt 2>&1 || true
          
          echo "Pylint scan completed"
      
      - name: Upload pylint Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: pylint-report-vdms-dataprep
          path: microservices/visual-data-preparation-for-retrieval/vdms/security-results/pylint-report-vdms-dataprep.txt

  # Python linting with pylint - Milvus DataPrep (requirements.txt-based)
  pylint-scan-milvus-dataprep:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
      
      - name: Install dependencies and pylint
        run: |
          cd microservices/visual-data-preparation-for-retrieval/milvus/src/
          pip install -r requirements.txt
          pip install pylint
      
      - name: Run pylint
        run: |
          cd microservices/visual-data-preparation-for-retrieval/milvus/src/
          mkdir -p security-results
          echo "=== Pylint Scan Results - Milvus DataPrep ===" > security-results/pylint-report-milvus-dataprep.txt
          echo "Scan Date: $(date)" >> security-results/pylint-report-milvus-dataprep.txt
          echo "" >> security-results/pylint-report-milvus-dataprep.txt
          
          # Create a basic pylint config
          cat > .pylintrc << EOF
          [MESSAGES CONTROL]
          disable=C0111,C0103,R0903,R0913,W0613,W0622,R0801,R0902,R0914,R0915,R0912,C0301,C0302,R0801
          
          [FORMAT]
          max-line-length=120
          
          [REPORTS]
          output-format=text
          reports=yes
          EOF
          
          # Find all Python files and lint them
          find . -type f -name "*.py" -exec pylint --rcfile=.pylintrc {} + >> security-results/pylint-report-milvus-dataprep.txt 2>&1 || true
          
          echo "Pylint scan completed"
      
      - name: Upload pylint Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: pylint-report-milvus-dataprep
          path: microservices/visual-data-preparation-for-retrieval/milvus/src/security-results/pylint-report-milvus-dataprep.txt

  # Black code formatting check - VDMS
  black-check-vdms:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        run: |
          pip install poetry
          
      - name: Install dependencies
        run: |
          cd microservices/visual-data-preparation-for-retrieval/vdms/
          poetry lock --no-update
          poetry install --with dev || true
      
      - name: Run Black formatting check
        run: |
          cd microservices/visual-data-preparation-for-retrieval/vdms/
          mkdir -p security-results
          echo "=== Black Code Formatting Check Results - VDMS ===" > security-results/black-check-report-vdms.txt
          echo "Scan Date: $(date)" >> security-results/black-check-report-vdms.txt
          echo "" >> security-results/black-check-report-vdms.txt
          
          # Run black check
          poetry run black --check --diff src/ tests/ >> security-results/black-check-report-vdms.txt 2>&1 || true
          
          echo "Black formatting check completed"
      
      - name: Upload Black Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: black-check-report-vdms
          path: microservices/visual-data-preparation-for-retrieval/vdms/security-results/black-check-report-vdms.txt

  # Black code formatting check - Milvus
  black-check-milvus:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          cd microservices/visual-data-preparation-for-retrieval/milvus/src/
          pip install -r requirements.txt
          pip install black
      
      - name: Run Black formatting check
        run: |
          cd microservices/visual-data-preparation-for-retrieval/milvus/src/
          mkdir -p security-results
          echo "=== Black Code Formatting Check Results - Milvus ===" > security-results/black-check-report-milvus.txt
          echo "Scan Date: $(date)" >> security-results/black-check-report-milvus.txt
          echo "" >> security-results/black-check-report-milvus.txt
          
          # Run black check
          black --check --diff . >> security-results/black-check-report-milvus.txt 2>&1 || true
          
          echo "Black formatting check completed"
      
      - name: Upload Black Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: black-check-report-milvus
          path: microservices/visual-data-preparation-for-retrieval/milvus/src/security-results/black-check-report-milvus.txt

  # isort import sorting check - VDMS
  isort-check-vdms:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        run: |
          pip install poetry
          
      - name: Install dependencies
        run: |
          cd microservices/visual-data-preparation-for-retrieval/vdms/
          poetry lock --no-update
          poetry install --with dev || true
      
      - name: Run isort import sorting check
        run: |
          cd microservices/visual-data-preparation-for-retrieval/vdms/
          mkdir -p security-results
          echo "=== isort Import Sorting Check Results - VDMS ===" > security-results/isort-check-report-vdms.txt
          echo "Scan Date: $(date)" >> security-results/isort-check-report-vdms.txt
          echo "" >> security-results/isort-check-report-vdms.txt
          
          # Run isort check
          poetry run isort --check-only --diff src/ tests/ >> security-results/isort-check-report-vdms.txt 2>&1 || true
          
          echo "isort import sorting check completed"
      
      - name: Upload isort Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: isort-check-report-vdms
          path: microservices/visual-data-preparation-for-retrieval/vdms/security-results/isort-check-report-vdms.txt

  # isort import sorting check - Milvus
  isort-check-milvus:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          cd microservices/visual-data-preparation-for-retrieval/milvus/src/
          pip install -r requirements.txt
          pip install isort
      
      - name: Run isort import sorting check
        run: |
          cd microservices/visual-data-preparation-for-retrieval/milvus/src/
          mkdir -p security-results
          echo "=== isort Import Sorting Check Results - Milvus ===" > security-results/isort-check-report-milvus.txt
          echo "Scan Date: $(date)" >> security-results/isort-check-report-milvus.txt
          echo "" >> security-results/isort-check-report-milvus.txt
          
          # Run isort check
          isort --check-only --diff . >> security-results/isort-check-report-milvus.txt 2>&1 || true
          
          echo "isort import sorting check completed"
      
      - name: Upload isort Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: isort-check-report-milvus
          path: microservices/visual-data-preparation-for-retrieval/milvus/src/security-results/isort-check-report-milvus.txt

  # ShellCheck scanning job
  shellcheck-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup environment with shellcheck
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@5f1c7f544b235db6ded508b6b4c6a2d3a78a38be
        with:
          bootstrap_tools: "shellcheck"
      
      - name: Run ShellCheck
        run: |
          mkdir -p security-results
          echo "=== ShellCheck Scan Results ===" > security-results/shellcheck-report-visual-data-preparation.txt
          echo "Scan Date: $(date)" >> security-results/shellcheck-report-visual-data-preparation.txt
          echo "" >> security-results/shellcheck-report-visual-data-preparation.txt
          
          # Find all shell scripts and check them
          find microservices/visual-data-preparation-for-retrieval/ -type f \( -name "*.sh" -o -name "*.bash" \) -print0 | while IFS= read -r -d '' file; do
            echo "Checking: $file" >> security-results/shellcheck-report-visual-data-preparation.txt
            shellcheck "$file" >> security-results/shellcheck-report-visual-data-preparation.txt 2>&1 || true
            echo "---" >> security-results/shellcheck-report-visual-data-preparation.txt
          done
          
          echo "ShellCheck scan completed"
      
      - name: Upload ShellCheck Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: shellcheck-report-visual-data-preparation
          path: security-results/shellcheck-report-visual-data-preparation.txt
