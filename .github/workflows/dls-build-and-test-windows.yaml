name: "[DLS] [WIN] Build Windows DLLs"
run-name: "[DLS] [WIN] Build Windows DLLs (by ${{ github.actor }})"
on:
  workflow_call:
  workflow_dispatch:
permissions: {}
env:
  DLS_TARGET_DIRECTORY: C:\dlstreamer
  DLS_REPO_TARGET_DIRECTORY: C:\dlstreamer_repo


jobs:
  build:
    name: "[${{ matrix.runner_print_label }}] Build Windows DLLs"
    runs-on: ${{ matrix.runner_labels }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner_labels: [self-hosted, dlstreamer, ARL, windows] # Build and run tests on Arrow Lake system with Ubuntu 24
            runner_print_label: ARL
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.2.0
      with:
        path: edge-ai-libraries-repo
        persist-credentials: false
        submodules: false
        fetch-depth: 1

    - name: Init submodules
      run: |
        cd edge-ai-libraries-repo
        git submodule update --init libraries/dl-streamer/thirdparty/spdlog
        git submodule update --init libraries/dl-streamer/thirdparty/googletest

    - name: Copy DL Streamer repo
      shell: powershell
      run: |
        if (Test-Path ${{ env.DLS_REPO_TARGET_DIRECTORY }}) {
            Remove-Item -Recurse -Force $target
        }
        New-Item -ItemType Directory -Path ${{ env.DLS_REPO_TARGET_DIRECTORY }} | Out-Null
        Copy-Item -Path "edge-ai-libraries-repo\libraries\dl-streamer\*" -Destination ${{ env.DLS_REPO_TARGET_DIRECTORY }} -Recurse -Force

    # ======================================================== BUILDING PART ========================================================
    - name: ðŸ“¦ Build DL Streamer DLLs
      shell: powershell
      run: |
        cd ${{ env.DLS_REPO_TARGET_DIRECTORY }}
        & ./scripts/build_dlstreamer_dlls.ps1

    - name: Copy DLLs
      shell: powershell
      run: |
        $target = "${{ env.DLS_TARGET_DIRECTORY }}"
        $source = "C:\dlstreamer_tmp\build\intel64\Release\bin\Release"
        Write-Host "`nContents of source directory ($source):"
        Get-ChildItem -Path $source -Recurse
        if (Test-Path $target) {
            Remove-Item -Recurse -Force $target
        }

        # Copy DLLs
        New-Item -ItemType Directory -Path $target | Out-Null
        Copy-Item -Path "$source\*" -Destination $target -Recurse -Force

        # Copy script
        $scriptSource = "$PWD\edge-ai-libraries-repo\libraries\dl-streamer\scripts\setup_dls_env.ps1"
        $scriptDest = Join-Path $target "setup_dls_env.ps1"
        Copy-Item -Path $scriptSource -Destination $scriptDest -Force

        Write-Host "`nContents of target directory after copying ($target):"
        Get-ChildItem -Path $target -Recurse

    - name: Print list of DLLs with sizes
      shell: powershell
      run: |
        $files = Get-ChildItem -Path ${{ env.DLS_TARGET_DIRECTORY }} -Recurse -Filter *.dll -File

        $table = $files | ForEach-Object {
            "| $($_.Name) | $([math]::Round($_.Length / 1KB, 2)) KB |"
        }
        $count = $files.Count

        $summary = @()
        $summary += "### List of built DLL files"
        $summary += ""
        $summary += "| File |  Size  |"
        $summary += "|------|--------|"
        $summary += $table
        $summary += ""
        $summary += "**Count of files:** $count"

        $summary -join "`n" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

    # ======================================================== CLEAUP PART ========================================================
    - name: Clean up
      if: always()
      shell: powershell
      run: |
        Remove-Item -Path .\edge-ai-libraries-repo\ -Force -Recurse
        if (Test-Path "C:\dlstreamer_tmp\build") {
            Remove-Item -Recurse -Force "C:\dlstreamer_tmp\build"
        }
        if (Test-Path ${{ env.DLS_TARGET_DIRECTORY }}) {
            Remove-Item -Recurse -Force ${{ env.DLS_TARGET_DIRECTORY }}
        }
        if (Test-Path ${{ env.DLS_REPO_TARGET_DIRECTORY }}) {
            Remove-Item -Recurse -Force ${{ env.DLS_REPO_TARGET_DIRECTORY }}
        }
