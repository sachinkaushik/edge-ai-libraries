---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: "[GEN-AI] Chat-qna-CI"
run-name: "[GEN-AI-Chat-qna-CI] PR  workflow (by @${{ github.actor }} via ${{ github.event_name }})"


# Only run at most 1 workflow concurrently per PR, unlimited for branches
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

on:
  pull_request:
    branches:
      - main
    paths:
      - 'sample-applications/chat-question-and-answer/**'

jobs:
   
  trivy-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
        with:
          persist-credentials: false
      
      - name: Build Docker images
        run: |
          docker build -f ./sample-applications/chat-question-and-answer/Dockerfile -t chatqna-backend:latest ./sample-applications/chat-question-and-answer/
          docker build -t="chatqna-frontend:latest" ./sample-applications/chat-question-and-answer/ui/react
      
      - name: Run Trivy Filesystem Scan
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: trivy-fs
        with:
          scan_type: "fs"  
          scan-scope: "all"  
          severity: "HIGH,CRITICAL" 
          format: "json"
          scan_target: "sample-applications/chat-question-and-answer/"
          report_suffix: "-fs-chat-qna-CT7"
      
         
      - name: Run trivy Scan - chat-qna-backend (HTML Report)
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: chat-qna-backend-html
        with:
          scan_type: "image"  
          scan-scope: "all"
          scan_target: "chatqna-backend:latest"  
          severity: "HIGH,CRITICAL"  
          format: "table"
          report_suffix: "-image-chat-qna-backend-html-CT248"
          generate_sbom: "false"

      - name: Run trivy Scan - chat-qna-backend (SPDX SBOM)
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: chat-qna-backend-spdx
        with:
          scan_type: "image"  
          scan-scope: "all"
          scan_target: "chatqna-backend:latest"  
          severity: "HIGH,CRITICAL"  
          format: "spdx-json"
          scanners: "vuln"
          report_suffix: "-image-chat-qna-backend-spdx-CT248"
          generate_sbom: "false"
          

      - name: Run trivy Scan - chat-qna-frontend (HTML Report)
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: chat-qna-frontend-html
        with:
          scan_type: "image"  
          scan-scope: "all"
          scan_target: "chatqna-frontend:latest"  
          severity: "HIGH,CRITICAL"  
          format: "table"
          report_suffix: "-image-chat-qna-frontend-html-CT248"
          generate_sbom: "false"

      - name: Run trivy Scan - chat-qna-frontend (SPDX SBOM)
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        id: chat-qna-frontend-spdx
        with:
          scan_type: "image"  
          scan-scope: "all"
          scan_target: "chatqna-frontend:latest"  
          severity: "HIGH,CRITICAL"  
          format: "spdx-json"
          scanners: "vuln"
          report_suffix: "-image-chat-qna-frontend-spdx-CT248"
          generate_sbom: "false"

      
      - name: Scan Dockerfile with Trivy-backend
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        with:
          scan_type: "config"
          scan_target: "sample-applications/chat-question-and-answer/"
          severity: "HIGH,CRITICAL"
          format: "json"
          misconfig_scanners: "dockerfile"
          report_suffix: "-config-chat-qna-backend-CT222"

      - name: Scan Dockerfile with Trivy-frontend
        uses: open-edge-platform/orch-ci/.github/actions/security/trivy@27276444a9bcf247a27369406686b689933bd1ff
        with:
          scan_type: "config"
          scan_target: "sample-applications/chat-question-and-answer/ui/react/"
          severity: "HIGH,CRITICAL"
          format: "json"
          misconfig_scanners: "dockerfile"
          report_suffix: "-config-chat-qna-frontend-CT222"
           
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: trivy-report-chat-qna
          path: security-results/trivy*

  bandit-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Run Bandit Scan
        uses: open-edge-platform/orch-ci/.github/actions/security/bandit@27276444a9bcf247a27369406686b689933bd1ff
        id: bandit
        with:
          scan-scope: "all"  
          output-format: "txt" 
          fail-on-findings: "false"
          paths: "sample-applications/chat-question-and-answer/"
          report_suffix: "-bandit-chat-qna-CT161"
          
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: bandit-report
          path: bandit-report-*.txt
        

  clamav-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Run ClamAV Scan
        uses: open-edge-platform/orch-ci/.github/actions/security/clamav@27276444a9bcf247a27369406686b689933bd1ff
        id: clamav
        with:
          scan-scope: "all"  
          output-format: "txt" 
          fail-on-findings: "false"
          paths: "sample-applications/chat-question-and-answer/"
          exclude_dirs: ".git,node_modules,venv,ui/test,tests"
          
      - name: Upload Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: clamav-report-chatqna
          path: security-results/clamav*

#GitLeaks scanning job - matching your existing pattern
  gitleaks-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
        with:
          persist-credentials: false
          
      - name: Install gitleaks
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@5f1c7f544b235db6ded508b6b4c6a2d3a78a38be
        with:
          bootstrap_tools: "gitleaks"
          
      - name: Get current timestamp
        id: timestamp
        run: echo "time=$(date +%s)" >> "$GITHUB_OUTPUT"
        
      - name: Clone CI repo
        uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
        with:
          repository: open-edge-platform/orch-ci
          path: ci
          persist-credentials: false
          
      - name: Scan for secrets
        run: |
          gitleaks dir "sample-applications/chat-question-and-answer/" -v -c ci/.gitleaks.toml --baseline-path ci/gitleaks_baselines/gitleaks-chatqna.json -r gitleaks-chatqna.json || true
          
      - name: Upload Gitleaks Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: gitleaks-report-chat-qna-${{ steps.timestamp.outputs.time }}
          path: gitleaks-chatqna.json

  #Python linting with pylint
  pylint-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
      
      - name: Install Poetry
        run: |
          pip install poetry
          
      - name: Install dependencies and pylint
        run: |
          cd sample-applications/chat-question-and-answer/
          poetry install
          poetry add --group dev pylint
      
      - name: Run pylint
        run: |
          cd sample-applications/chat-question-and-answer/
          mkdir -p security-results
          echo "=== Pylint Scan Results ===" > security-results/pylint-report-chat-qna.txt
          echo "Scan Date: $(date)" >> security-results/pylint-report-chat-qna.txt
          echo "" >> security-results/pylint-report-chat-qna.txt
          
          # Create a basic pylint config
          cat > .pylintrc << EOF
          [MESSAGES CONTROL]
          disable=C0111,C0103,R0903,R0913,W0613,W0622,R0801,R0902,R0914,R0915,R0912,C0301,C0302
          
          [FORMAT]
          max-line-length=120
          
          [REPORTS]
          output-format=text
          reports=yes
          EOF
          
          # Find all Python files and lint them
          find app/ -type f -name "*.py" -exec poetry run pylint --rcfile=.pylintrc {} + >> security-results/pylint-report-chat-qna.txt 2>&1 || true
          
          echo "Pylint scan completed"
      
      - name: Upload pylint Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: pylint-report-chat-qna
          path: sample-applications/chat-question-and-answer/security-results/pylint-report-chat-qna.txt

#ShellCheck scanning job
  shellcheck-scan:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Setup environment with shellcheck
        uses: open-edge-platform/orch-ci/.github/actions/bootstrap@5f1c7f544b235db6ded508b6b4c6a2d3a78a38be
        with:
          bootstrap_tools: "shellcheck"
      
      - name: Run ShellCheck
        run: |
          mkdir -p security-results
          echo "=== ShellCheck Scan Results ===" > security-results/shellcheck-report-chat-qna.txt
          echo "Scan Date: $(date)" >> security-results/shellcheck-report-chat-qna.txt
          echo "" >> security-results/shellcheck-report-chat-qna.txt
          
          # Find all shell scripts and check them
          find sample-applications/chat-question-and-answer/ -type f \( -name "*.sh" -o -name "*.bash" \) -print0 | while IFS= read -r -d '' file; do
            echo "Checking: $file" >> security-results/shellcheck-report-chat-qna.txt
            shellcheck "$file" >> security-results/shellcheck-report-chat-qna.txt 2>&1 || true
            echo "---" >> security-results/shellcheck-report-chat-qna.txt
          done
          
          echo "ShellCheck scan completed"
      
      - name: Upload ShellCheck Report
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: shellcheck-report-chat-qna
          path: security-results/shellcheck-report-chat-qna.txt



#Run jslinter Frontend
  run-jslinter-frontend:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install dependencies
        run: |
          cd sample-applications/chat-question-and-answer/ui/react/
          npm install
      
      - name: Run linting with reports
        run: |
          cd sample-applications/chat-question-and-answer/ui/react/
          mkdir -p lint-results
          
          # Use project's npm scripts (for project-specific config)
          npm run lint > lint-results/npm-lint-output.txt 2>&1 || true
          npm run prettier > lint-results/prettier-check.txt 2>&1 || true
      
      - name: Upload lint results
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: frontend-lint-results
          path: sample-applications/chat-question-and-answer/ui/react/lint-results/
        



#Run Unit test cases Frontend
  run-unit-tests-frontend:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Install dependencies
        run: |
          cd sample-applications/chat-question-and-answer/ui/react/
          npm install
          npm run coverage
          
      - name: Upload test results
        uses: actions/upload-artifact@de65e23aa2b7e23d713bb51fbfcb6d502f8667d8
        with:
          name: chat-qna-frontend-results
          path: sample-applications/chat-question-and-answer/ui/react/

#Run Unit test cases for Backend
  run-unit-tests-backend:
    runs-on: ubuntu-22.04-32core-128GB
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@8edcb1bdb4e267140fa742c62e395cd74f332709

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
    
      - name: Run unit tests
        run: |
          cd sample-applications/chat-question-and-answer/
          # Backend Coverage (including all production Python files)
          python3.12 -m venv chat-qna-venv
          source chat-qna-venv/bin/activate
          pip install poetry
          poetry install --with dev || true
          poetry add --group dev pytest-cov || true
          source setup.sh llm=TGI embed=TEI
          poetry run pytest tests/unit_tests/ \
            --cov=app \
            --cov=ovms_config \
            --cov-report=html:coverage-backend \
            --cov-report=xml:coverage-backend.xml \
            --cov-report=term-missing \
            --cov-branch || true
          deactivate
          rm -rf chat-qna-venv
